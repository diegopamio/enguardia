# Task ID: 5
# Title: Implement Roster Handling and Import
# Status: in-progress
# Dependencies: 2, 4
# Priority: high
# Description: Create functionality to import athlete rosters from FIE XML or CSV files, and allow manual editing.
# Details:
1. Implement file upload functionality for XML and CSV.
2. Create parsers for FIE XML and CSV formats.
3. Develop API routes for roster import and CRUD operations.
4. Design and implement UI for roster management.
5. Add functionality to mark athletes as present/absent.
6. Implement duplicate detection and prevention.
7. Use a library like 'xml2js' for XML parsing and 'csv-parse' for CSV parsing.

# Test Strategy:
Test import functionality with various XML and CSV files. Verify correct parsing and data storage. Test duplicate detection and manual editing features.

# Subtasks:
## 1. Develop File Upload and Parsing for FIE XML/CSV [done]
### Dependencies: None
### Description: Implement secure file upload functionality and robust parsers for FIE XML and CSV formats, ensuring correct extraction of athlete and roster data.
### Details:
Support both FIE XML and CSV file types. Use libraries such as 'xml2js' for XML and 'csv-parse' for CSV. Validate file structure and handle errors gracefully.
<info added on 2025-07-07T22:10:05.493Z>
## Major Accomplishments:
- **Comprehensive FIE Research**: Researched and documented FIE XML/CSV format standards
- **Core API Endpoints Created**:
  - `/api/athletes` - Full CRUD for global athlete management 
  - `/api/athletes/import` - Advanced FIE file import with duplicate detection
- **Robust Parsing Library**: Created `src/lib/roster-parser.ts` with support for:
  - XML parsing (multiple format variations)
  - CSV parsing with field mapping
  - Data validation and normalization
  - TypeScript-compliant with proper error handling

## Technical Implementation:
- **Global Athlete System**: Leverages existing schema's global athlete design
- **Organizational Affiliations**: Supports multi-organization memberships
- **Duplicate Detection**: FIE ID, name+birth, and name-only matching strategies
- **Data Quality**: Comprehensive validation with Zod schemas
- **Field Mapping**: Handles various CSV/XML field name variations
- **Error Handling**: Graceful error handling with detailed feedback

## File Import Features:
- **Multiple Formats**: XML and CSV support with auto-detection
- **Duplicate Strategies**: Skip, Update, or Error on duplicates
- **Batch Processing**: Efficient processing of large roster files
- **Progress Reporting**: Detailed results with created/updated/skipped counts
- **Affiliation Management**: Auto-creates organizational relationships

## Dependencies Installed:
- xml2js, csv-parse, multer for file processing
- Proper TypeScript types for all libraries
</info added on 2025-07-07T22:10:05.493Z>

## 2. Implement Global Athlete Registry with Duplicate Detection [done]
### Dependencies: 5.1
### Description: Create a global athlete database that enables searching and reusing athlete records across organizations, with logic to detect and prevent duplicates during import.
### Details:
Use unique identifiers (e.g., name, birthdate, email) to match athletes. If a match is found, link to the existing record instead of creating a new one.
<info added on 2025-07-07T22:19:24.365Z>
The Global Athlete Registry has been successfully implemented with comprehensive duplicate detection capabilities. The system identifies duplicates through multiple strategies:
- FIE ID matching (primary method)
- Name + date of birth combination matching
- Exact name matching (fallback option)

The user interface provides complete athlete management through:
- A dedicated `/athletes` page with search, filtering, and pagination
- Athlete cards displaying organizations, weapons, rankings, and competition history
- Create/edit forms with organizational integration
- Advanced import interface with configurable duplicate handling options (skip, update, or error)

The registry supports cross-organizational athletes with various affiliation types (MEMBER, GUEST, VISITING_ATHLETE) and maintains a global search capability across all organizations. The system is fully integrated into the main navigation with responsive design and proper authentication controls.
</info added on 2025-07-07T22:19:24.365Z>

## 3. Design Organizational Affiliation Management [done]
### Dependencies: 5.2
### Description: Develop functionality to associate athletes with one or more organizations and manage their affiliations, including team assignments and roles.
### Details:
Allow athletes to be affiliated with multiple organizations and update affiliations during import or manual editing.
<info added on 2025-07-11T12:48:08.321Z>
## Current Analysis of Organizational Affiliation Management

### âœ… What's Already Working:

**Database Schema:**
- `AthleteOrganization` table with membership types (MEMBER, GUEST, VISITING_ATHLETE)
- `AthleteClub` table with club membership types (MEMBER, GUEST, TRAINEE, COACH, STAFF)
- Support for multiple organizations per athlete
- Support for multiple clubs per athlete with primary club designation
- Status tracking (ACTIVE, INACTIVE, SUSPENDED)

**API Endpoints:**
- `/api/athletes` (GET/POST) - includes organization and club affiliation
- `/api/athletes/[id]` (PUT/DELETE) - updates affiliations 
- `/api/athletes/import` - bulk import with affiliation management
- `/api/clubs` - club management with organization affiliations

**UI Components:**
- AthleteForm: Organization and club selection for athletes
- AthleteList: Displays organization and club affiliations
- ClubForm: Organization affiliation for clubs
- Import functionality with affiliation options

### ðŸ”§ Areas Needing Enhancement:

1. **Multi-Organization Support in UI**: Current forms only allow single organization selection
2. **Bulk Affiliation Management**: No UI for managing multiple athlete affiliations at once
3. **Team Assignment Features**: No concept of teams within organizations
4. **Role Management**: Limited role assignment within organizations
5. **Historical Affiliation Tracking**: Basic tracking exists but no UI to view history
6. **Transfer Management**: No specific workflow for athlete transfers between organizations

The foundation is solid, but the UI and workflows need enhancement for better multi-organizational management.
</info added on 2025-07-11T12:48:08.321Z>
<info added on 2025-07-11T12:57:02.985Z>
## âœ… Implementation Complete: Organizational Affiliation Management

Successfully implemented comprehensive organizational affiliation management with the following enhancements:

### ðŸ”§ **New API Endpoints:**
- `/api/athletes/affiliations` - Bulk affiliation operations (add/remove/update)
- `/api/organizations` - Organization listing for affiliation management
- Enhanced `/api/athletes/[id]` PUT endpoint for individual athlete updates

### ðŸŽ¯ **New UI Components:**
- **AffiliationManager.tsx** - Comprehensive modal for:
  - Bulk affiliation operations (add/remove/update organizations and clubs)
  - Athlete transfer between organizations with club transfer option
  - Detailed affiliation history viewing with timestamps
- **Enhanced AthleteManagement.tsx** with:
  - Bulk selection functionality with checkboxes
  - "Select All" and "Clear Selection" options
  - "Manage Affiliations" action button for selected athletes
- **Updated AthleteList.tsx** with:
  - Individual athlete selection checkboxes
  - Visual selection indicators (blue ring around selected cards)
  - Selection state management

### ðŸ“‹ **Key Features Implemented:**
1. **Bulk Operations** - Manage multiple athletes simultaneously
2. **Organization Transfer** - Move athletes between organizations with optional club transfers
3. **Affiliation History** - Complete audit trail of organization and club memberships
4. **Permission-Based Access** - Proper role validation for affiliation management
5. **Real-time Updates** - Immediate UI refresh after successful operations

### ðŸŽ¨ **UI/UX Enhancements:**
- Consistent styling with existing design system
- Clear visual feedback for selections and operations
- Modal-based workflow for complex operations
- Proper loading states and error handling
- Responsive design for mobile and desktop

The organizational affiliation management system is now fully functional and ready for production use!
</info added on 2025-07-11T12:57:02.985Z>

## 4. Build Roster Management UI with Manual Editing [pending]
### Dependencies: 5.3
### Description: Create a user interface for administrators to view, edit, and manage rosters, including manual addition, editing, and removal of athletes.
### Details:
UI should support searching the global athlete registry, editing athlete details, and managing organizational affiliations.

## 5. Enable Athlete Presence Tracking and CRUD Operations [pending]
### Dependencies: 5.4
### Description: Add features to mark athletes as present or absent and provide full CRUD (Create, Read, Update, Delete) operations for roster entries via API and UI.
### Details:
Presence status should be easily toggled and visible in the roster UI. Ensure API endpoints support all necessary operations.

